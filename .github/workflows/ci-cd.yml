name: CI/CD Pipeline

on:
  push:
    branches: [ main, frontend, backend ]
  pull_request:
    branches: [ main ]

jobs:
  # 1. Security Check - GitGuardian Secret Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: GitGuardian Secret Scan
        uses: GitGuardian/ggshield-action@v1.25.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_REQUEST_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_PULL_REQUEST_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  # 2. Frontend Tests and Build
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    needs: security-scan
    defaults:
      run:
        working-directory: ./Senior Project 1/frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './Senior Project 1/frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm run test:ci
        env:
          CI: true

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: ./Senior Project 1/frontend/.next

  # 3. Backend Tests and Validation
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    needs: security-scan
    defaults:
      run:
        working-directory: ./Senior Project 1/backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('./Senior Project 1/backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Run linting (flake8)
        run: |
          pip install flake8
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run type checking (mypy)
        run: |
          pip install mypy
          mypy app/ --ignore-missing-imports || true

      - name: Run database model tests
        run: python test_models.py
        env:
          DATABASE_URL: sqlite:///./test.db
          ENVIRONMENT: test

      - name: Run pytest
        run: pytest --cov=app --cov-report=xml --cov-report=term-missing
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          ENVIRONMENT: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./Senior Project 1/backend/coverage.xml
          flags: backend
          name: backend-coverage

  # 4. Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: |
          cd "Senior Project 1/backend"
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install frontend dependencies
        run: |
          cd "Senior Project 1/frontend"
          npm ci

      - name: Start backend server
        run: |
          cd "Senior Project 1/backend"
          python run.py &
          sleep 10
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          ENVIRONMENT: test

      - name: Run API health check
        run: |
          curl -f http://localhost:8000/health || exit 1

      - name: Build frontend
        run: |
          cd "Senior Project 1/frontend"
          npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: http://localhost:8000

      - name: Run E2E tests (if available)
        run: |
          echo "E2E tests would run here"
          # cd "Senior Project 1/frontend"
          # npm run test:e2e

  # 5. Deployment (only on main branch)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [frontend, backend, integration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: ./Senior Project 1/frontend/.next

      - name: Deploy to staging
        run: |
          echo "Deployment would happen here"
          echo "Frontend: Deploy to Vercel"
          echo "Backend: Deploy to Railway/Render"

      - name: Notify deployment
        run: |
          echo "Deployment completed successfully"
          echo "Frontend URL: https://your-app.vercel.app"
          echo "Backend URL: https://your-api.railway.app"